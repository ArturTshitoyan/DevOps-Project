# crate vpc
resource "aws_vpc" "main" {
  cidr_block = "${var.vpc_cidr_block}"
  instance_tenancy = "default"

  tags = {
    Name = "${var.name}_vpc"
  }
}

# crate subnet 1
resource "aws_subnet" "main1" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "${var.sub1_cidr_block}"

  tags = {
    Name = "${var.name}_sub1"
  }
}

# crate subnet 2
resource "aws_subnet" "main2" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "${var.sub2_cidr_block}"

  tags = {
    Name = "${var.name}_sub2"
  }
}

# internet getway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "${var.name}_gw"
  }
}

# route table
resource "aws_route_table" "main" {
  vpc_id = aws_vpc.main.id

route {
  cidr_block = "${var.allow_all}"
  gateway_id = aws_internet_gateway.main.id
}

  tags = {
    Name = "${var.name}_rt"
  }
}
resource "aws_main_route_table_association" "name" {
  vpc_id         = aws_vpc.main.id
  route_table_id = aws_route_table.main.id
  
}

# attach internet getway to vpc

#resource "aws_internet_gateway_attachment" "main" {
 # internet_gateway_id = aws_internet_gateway.main.id
  #vpc_id              = aws_vpc.main.id
#}


# access controll list

resource "aws_network_acl" "main" {
  vpc_id = aws_vpc.main.id

  egress {
    protocol   = "all"
    rule_no    = 200
    action     = "allow"
    cidr_block = "${var.allow_all}"
    from_port  = 0
    to_port    = 0
  }

  ingress {
    protocol   = "all"
    rule_no    = 100
    action     = "allow"
    cidr_block = "${var.allow_all}"
    from_port  = 0
    to_port    = 0
  }

  tags = {
    Name = "${var.name}_acl"
  }
}

# security group 

resource "aws_security_group" "main" {
  name        = "hoso_sg"
  description = "Allow all inbound traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    description      = "all from VPC"
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["${var.allow_all}"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["${var.allow_all}"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "${var.name}_sg"
  }
}

# crate key pair

resource "aws_key_pair" "deployer" {
  key_name   = "id_rsa"
  public_key = file("/Users/hovseppet/.ssh/id_rsa.pub")
}
# crate instance

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_instance" "web" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t2.micro"
  iam_instance_profile = aws_iam_instance_profile.test_profile.name
  key_name = "id_rsa"
  #security_groups = [ aws_security_group.main.id ]
  vpc_security_group_ids = [ aws_security_group.main.id ]
  subnet_id = aws_subnet.main1.id
  associate_public_ip_address = true

  tags = {
    Name = "${var.name}_ubuntu"
  }
}


# resource "aws_iam_role_policy" "ec2_policy" {
#   name = "ec2_policy"
#   role = aws_iam_role.test_role.id

#   # Terraform's "jsonencode" function converts a
#   # Terraform expression result to valid JSON syntax.
#   policy = "${file("ec2_policy.json")}"
# }

resource "aws_iam_role" "test_role" {
  name = "ssm_full_access"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
    ]
  })
}


resource "aws_iam_policy_attachment" "test-attach" {
  name       = "test-attachment"
  roles      = [aws_iam_role.test_role.name]
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
}

resource "aws_iam_instance_profile" "test_profile" {
  name = "test_profile"
  role = aws_iam_role.test_role.name
}

# Network Load Balancer

resource "aws_lb" "test" {
  name               = "test"
  internal           = false
  load_balancer_type = "network"
  subnets            = [aws_subnet.main1.id]

  enable_deletion_protection = true

  tags = {
    Environment = "production"
  }
}

# Instance Target Group

resource "aws_lb_target_group" "test" {
  name     = "test"
  port     = 80
  protocol = "TCP"
  vpc_id   = aws_vpc.main.id
}

# load balancer listner
resource "aws_lb_listener" "test" {
  load_balancer_arn = aws_lb.test.arn
  port              = "80"
  protocol          = "TCP"
  

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.test.arn
  }
}

resource "aws_lb_target_group_attachment" "test" {
  target_group_arn = aws_lb_target_group.test.arn
  target_id        = aws_instance.web.id
  port             = 80
}
